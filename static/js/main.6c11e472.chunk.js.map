{"version":3,"sources":["components/courses.jsx","components/mycounter.jsx","components/lstcounters.jsx","App.js","serviceWorker.js","index.js"],"names":["Courses","props","className","href","totalItems","MyCounter","class","style","marginTop","marginBottom","fontWeight","this","counter","name","setBadgeClasses","formatCt","onClick","onIncrement","onDelete","id","badgeclasses","value","Component","LstCounters","counters","map","key","onClearCounters","App","state","handleAddButton","tempcounters","i","indexOf","setState","handleDeleteButton","countersId","filter","c","handleClearCounters","ct","Fragment","item","reduce","prev","next","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAaeA,EAXC,SAACC,GACb,OAAQ,yBAAKC,UAAU,iCACvB,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,6BAEI,6BAFJ,wBAII,0BAAMD,UAAU,uBAAuBD,EAAMG,eCoBtCC,E,iLAxBD,IAAD,OACL,OACA,yBAAKC,MAAM,kBAAkBC,MAAQ,CAACC,UAAU,GAAIC,aAAa,KAC7D,wBAAIF,MAAQ,CAACG,WAAW,SAAUC,KAAKV,MAAMW,QAAQC,MACrD,0BAAMX,UAAWS,KAAKG,mBAAoBH,KAAKI,YAC/C,4BAAQC,QAAS,kBAAM,EAAKf,MAAMgB,YAAY,EAAKhB,MAAMW,UACzDV,UAAU,0BADV,kBAEA,4BAAQc,QAAS,kBAAM,EAAKf,MAAMiB,SAAS,EAAKjB,MAAMW,QAAQO,KAAKjB,UAAU,8BAA7E,mB,wCAMJ,IAAIkB,EAAe,aAEnB,OADAA,GAA8C,IAA7BT,KAAKV,MAAMW,QAAQS,MAAe,eAAiB,kB,iCAI5D,IACAA,EAAUV,KAAKV,MAAMW,QAArBS,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GAtBdC,aCaTC,E,iLAVD,IAAD,OACL,OAAQ,6BACFZ,KAAKV,MAAMuB,SAASC,KAAI,SAAAb,GAAO,OAChC,kBAAC,EAAD,CAAWc,IAAKd,EAAQO,GAAIP,QAASA,EAASM,SAAU,EAAKjB,MAAMiB,SAAUD,YAAa,EAAKhB,MAAMgB,iBAE/G,4BAAQf,UAAU,6BAA6Bc,QAASL,KAAKV,MAAM0B,iBAAnE,uB,GAPuBL,a,wOC6CXM,E,2MA1CXC,MAAQ,CACJL,SAAU,CACN,CAAEL,GAAI,EAAGE,MAAO,EAAGR,KAAM,uBACzB,CAAEM,GAAI,EAAGE,MAAO,EAAGR,KAAM,2BACzB,CAAEM,GAAI,EAAGE,MAAO,EAAGR,KAAM,oCACzB,CAAEM,GAAI,EAAGE,MAAO,EAAGR,KAAO,+C,EAIlCiB,gBAAkB,SAAAlB,GACd,IAAMmB,EAAY,YAAO,EAAKF,MAAML,UAC9BQ,EAAID,EAAaE,QAAQrB,GAC/BmB,EAAaC,G,yVAAb,IAAsBpB,GACtBmB,EAAaC,GAAGX,QAChB,EAAKa,SAAS,CAAEV,SAAUO,K,EAG9BI,mBAAqB,SAACC,GAClB,IAAML,EAAe,EAAKF,MAAML,SAASa,QAAO,SAAAC,GAAC,OAAIA,EAAEnB,KAAOiB,KAC9D,EAAKF,SAAU,CAAEV,SAAUO,K,EAG/BQ,oBAAsB,WAClB,IAAMR,EAAe,EAAKF,MAAML,SAASC,KAAI,SAAAe,GAEzC,OADAA,EAAGnB,MAAQ,EACJmB,KAEX,EAAKN,SAAS,CAAEV,SAAUO,K,wEAI9B,OACE,kBAAC,IAAMU,SAAP,KACA,kBAAC,EAAD,CAASrC,WAAYO,KAAKkB,MAAML,SAASC,KAAI,SAAAiB,GAAI,OAAIA,EAAKrB,SAAOsB,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,OAC/F,0BAAM3C,UAAU,aACd,kBAAC,EAAD,CAAasB,SAAUb,KAAKkB,MAAML,SAAUG,gBAAiBhB,KAAK4B,oBAAqBrB,SAAUP,KAAKwB,mBAAoBlB,YAAaN,KAAKmB,wB,GApClIR,aCOEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6c11e472.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Courses = (props) => {\r\n    return (<nav className=\"navbar navbar-dark bg-primary\">\r\n    <a className=\"navbar-brand\" href=\"#\">\r\n        Miami City College courses\r\n        <br></br> \r\n        Total of Enrollments: \r\n        <span className=\"badge badge-success\">{props.totalItems}</span>\r\n    </a>\r\n</nav>);\r\n};\r\n\r\nexport default Courses;","import React, { Component } from 'react';\r\n\r\nclass MyCounter extends Component {\r\n  \r\n    render() {\r\n        return (\r\n        <div class=\"container-fluid\" style ={{marginTop:30, marginBottom:20}}>\r\n            <h6 style ={{fontWeight:'bold'}}>{this.props.counter.name}</h6>\r\n            <span className={this.setBadgeClasses()}>{this.formatCt()}</span>\r\n            <button onClick={() => this.props.onIncrement(this.props.counter)} \r\n            className=\"btn btn-success btn-sm\">Add Enrollment</button>\r\n            <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-warning btn-sm m-3\">Cancel Event</button>\r\n        </div>\r\n        );\r\n    };\r\n\r\n    setBadgeClasses() {\r\n        let badgeclasses = \"badge m-3 \";\r\n        badgeclasses += (this.props.counter.value === 0) ? \"badge-danger\" : \"badge-success\";\r\n        return badgeclasses;\r\n    };\r\n\r\n    formatCt() {\r\n        const { value } = this.props.counter;\r\n        return value === 0 ? \"Zero\" : value;\r\n    };\r\n}\r\n\r\nexport default MyCounter;","import React, { Component } from 'react';\r\nimport MyCounter from './mycounter';\r\n\r\nclass LstCounters extends Component {\r\n\r\n    render() {\r\n        return (<div>\r\n            { this.props.counters.map(counter => \r\n            (<MyCounter key={counter.id} counter={counter} onDelete={this.props.onDelete} onIncrement={this.props.onIncrement} \r\n\t\t\t/>)) }\r\n\t\t\t<button className=\"btn btn-primary btn-sm m-3\" onClick={this.props.onClearCounters}>Clear Counters</button>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default LstCounters;","import React, { Component } from 'react';\nimport Courses from './components/courses';\nimport LstCounters from './components/lstcounters';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        counters: [\n            { id: 1, value: 0, name: 'React JS vs Angular'},\n            { id: 2, value: 0, name: 'ASP.NET Core or Node JS'},\n            { id: 3, value: 0, name: 'Lifecycle of React JS Components'},\n            { id: 4, value: 0, name:  'Comparing JavaScript Libraries/Frameworks'}\n        ]\n    };\n\n    handleAddButton = counter => {\n        const tempcounters = [...this.state.counters];\n        const i = tempcounters.indexOf(counter);\n        tempcounters[i] = {...counter};\n        tempcounters[i].value++;\n        this.setState({ counters: tempcounters });\n    };\n\n    handleDeleteButton = (countersId) => {\n        const tempcounters = this.state.counters.filter(c => c.id !== countersId);\n        this.setState( { counters: tempcounters });\n    };\n\n    handleClearCounters = () => {\n        const tempcounters = this.state.counters.map(ct => {\n            ct.value = 0;\n            return ct;\n        });\n        this.setState({ counters: tempcounters })\n    };\n\n  render() {\n    return (\n      <React.Fragment>\n      <Courses totalItems={this.state.counters.map(item => item.value).reduce((prev, next) => prev + next) }/>\n      <main className=\"container\">\n        <LstCounters counters={this.state.counters} onClearCounters={this.handleClearCounters} onDelete={this.handleDeleteButton} onIncrement={this.handleAddButton} />\n      </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}